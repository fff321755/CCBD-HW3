AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation for CMOS 6998 008 CCBD assignment 3

Parameters:
  SGModelName:
    Type: String
    Default: sms-spam-classifier-mxnet-2022-04-15-20-39-11-955
  LambdaS3Bucket:
    Type: String
    Default: cloudformation-forntend-lambdas
  EmailS3BucketName:
    Type: String
    Default: cloudformation-emailbucket-6998-08-kw2963
  

Resources:
# Sagemaker Endpoint
  Endpoint:
    Type: "AWS::SageMaker::Endpoint"
    Properties:
      EndpointConfigName:
        !GetAtt EndpointConfig.EndpointConfigName

  EndpointConfig:
    Type: "AWS::SageMaker::EndpointConfig"
    Properties:
      ProductionVariants:
        - InitialInstanceCount: 1
          InitialVariantWeight: 1.0
          InstanceType: ml.t2.large
          ModelName: !Ref SGModelName
          VariantName: !Ref SGModelName

# S3 and lambda trigger
  BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref Lambda
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${EmailS3BucketName}"

  EmailBucket:
    Type: AWS::S3::Bucket
    DependsOn: BucketPermission
    Properties:
      BucketName: !Ref EmailS3BucketName
      AccessControl: Private
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt Lambda.Arn

  EmailBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSESPuts
            Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: 
            - 's3:PutObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref EmailBucket
                - /*
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref "AWS::AccountId"

      Bucket: !Ref EmailBucket

  # Lambda
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: lambda.zip
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdasRole.Arn
      Timeout: 30
      MemorySize: 128
      Runtime: python3.7
      Environment:
        Variables:
          SAGEMAKER_ENDPOINT: !GetAtt Endpoint.EndpointName
      Layers: 
        - arn:aws:lambda:us-east-1:021253950508:layer:hashlib:1
        - arn:aws:lambda:us-east-1:668099181075:layer:AWSLambda-Python37-SciPy1x:115
          
  LambdasRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: ""
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/AmazonS3FullAccess','arn:aws:iam::aws:policy/AmazonSESFullAccess','arn:aws:iam::aws:policy/AmazonSageMakerFullAccess']


  # SES
  PutS3RuleSet:
    Type: AWS::SES::ReceiptRuleSet
    
  PutS3Rule:
    Type: AWS::SES::ReceiptRule
    DependsOn: EmailBucketPolicy
    Properties:
      Rule:
        Actions:
          - S3Action:
              BucketName: !Ref EmailS3BucketName
        Enabled: true
        ScanEnabled: false
      RuleSetName: !Ref PutS3RuleSet